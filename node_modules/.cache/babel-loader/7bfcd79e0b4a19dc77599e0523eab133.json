{"ast":null,"code":"import _slicedToArray from \"/Users/piumi/Desktop/sketchbook/Tech_Sketchbook/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/piumi/Desktop/sketchbook/Tech_Sketchbook/src/components/Canvas.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport useWindowSize from './WindowSize';\nexport default function Canvas(props) {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        drawing = _useState2[0],\n        setDrawing = _useState2[1];\n\n  const _useState3 = useState(window.innerWidth),\n        _useState4 = _slicedToArray(_useState3, 2),\n        width = _useState4[0],\n        setWidth = _useState4[1];\n\n  const _useState5 = useState(window.innerHeight),\n        _useState6 = _slicedToArray(_useState5, 2),\n        height = _useState6[0],\n        setHeight = _useState6[1];\n\n  const canvasRef = useRef();\n  const ctx = useRef();\n  useEffect(() => {\n    ctx.current = canvasRef.current.getContext('2d');\n  }, []);\n\n  const _useWindowSize = useWindowSize(() => {\n    setWidth(windowWidth);\n    setHeight(windowHeight);\n  }),\n        _useWindowSize2 = _slicedToArray(_useWindowSize, 2),\n        windowWidth = _useWindowSize2[0],\n        windowHeight = _useWindowSize2[1];\n\n  function handleMouseMove(e) {\n    // actual coordinates\n    const coords = [e.clientX - canvasRef.current.offsetLeft, e.clientY - canvasRef.current.offsetTop];\n\n    if (drawing) {\n      ctx.current.lineTo(...coords);\n      ctx.current.stroke();\n    }\n\n    if (props.handleMouseMove) {\n      props.handleMouseMove(...coords);\n    }\n  }\n\n  function startDrawing(e) {\n    ctx.current.lineJoin = 'round';\n    ctx.current.lineCap = 'round';\n    ctx.current.lineWidth = 10;\n    ctx.current.strokeStyle = props.color;\n    ctx.current.beginPath(); // actual coordinates\n\n    ctx.current.moveTo(e.clientX - canvasRef.current.offsetLeft, e.clientY - canvasRef.current.offsetTop);\n    setDrawing(true);\n  }\n\n  function stopDrawing() {\n    ctx.current.closePath();\n    setDrawing(false);\n  }\n\n  return React.createElement(\"canvas\", {\n    ref: canvasRef,\n    width: windowWidth,\n    height: windowHeight,\n    onMouseDown: startDrawing,\n    onMouseUp: stopDrawing,\n    onMouseOut: stopDrawing,\n    onMouseMove: handleMouseMove,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  });\n}","map":{"version":3,"sources":["/Users/piumi/Desktop/sketchbook/Tech_Sketchbook/src/components/Canvas.js"],"names":["React","useState","useEffect","useRef","useWindowSize","Canvas","props","drawing","setDrawing","window","innerWidth","width","setWidth","innerHeight","height","setHeight","canvasRef","ctx","current","getContext","windowWidth","windowHeight","handleMouseMove","e","coords","clientX","offsetLeft","clientY","offsetTop","lineTo","stroke","startDrawing","lineJoin","lineCap","lineWidth","strokeStyle","color","beginPath","moveTo","stopDrawing","closePath"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,OAAOC,aAAP,MAA0B,cAA1B;AAEA,eAAe,SAASC,MAAT,CAAgBC,KAAhB,EAAuB;AAAA,oBACNL,QAAQ,CAAC,KAAD,CADF;AAAA;AAAA,QAC7BM,OAD6B;AAAA,QACpBC,UADoB;;AAAA,qBAEVP,QAAQ,CAACQ,MAAM,CAACC,UAAR,CAFE;AAAA;AAAA,QAE7BC,KAF6B;AAAA,QAEtBC,QAFsB;;AAAA,qBAGRX,QAAQ,CAACQ,MAAM,CAACI,WAAR,CAHA;AAAA;AAAA,QAG7BC,MAH6B;AAAA,QAGrBC,SAHqB;;AAKpC,QAAMC,SAAS,GAAGb,MAAM,EAAxB;AACA,QAAMc,GAAG,GAAGd,MAAM,EAAlB;AACAD,EAAAA,SAAS,CAAC,MAAM;AACde,IAAAA,GAAG,CAACC,OAAJ,GAAcF,SAAS,CAACE,OAAV,CAAkBC,UAAlB,CAA6B,IAA7B,CAAd;AAED,GAHQ,EAGN,EAHM,CAAT;;AAPoC,yBAYAf,aAAa,CAAC,MAAM;AACtDQ,IAAAA,QAAQ,CAACQ,WAAD,CAAR;AACAL,IAAAA,SAAS,CAACM,YAAD,CAAT;AACD,GAHgD,CAZb;AAAA;AAAA,QAY7BD,WAZ6B;AAAA,QAYhBC,YAZgB;;AAiBpC,WAASC,eAAT,CAAyBC,CAAzB,EAA4B;AAC1B;AACA,UAAMC,MAAM,GAAG,CACbD,CAAC,CAACE,OAAF,GAAYT,SAAS,CAACE,OAAV,CAAkBQ,UADjB,EAEbH,CAAC,CAACI,OAAF,GAAYX,SAAS,CAACE,OAAV,CAAkBU,SAFjB,CAAf;;AAIA,QAAIrB,OAAJ,EAAa;AACXU,MAAAA,GAAG,CAACC,OAAJ,CAAYW,MAAZ,CAAmB,GAAGL,MAAtB;AACAP,MAAAA,GAAG,CAACC,OAAJ,CAAYY,MAAZ;AACD;;AACD,QAAIxB,KAAK,CAACgB,eAAV,EAA2B;AACvBhB,MAAAA,KAAK,CAACgB,eAAN,CAAsB,GAAGE,MAAzB;AACH;AACF;;AAED,WAASO,YAAT,CAAsBR,CAAtB,EAAyB;AACvBN,IAAAA,GAAG,CAACC,OAAJ,CAAYc,QAAZ,GAAuB,OAAvB;AACAf,IAAAA,GAAG,CAACC,OAAJ,CAAYe,OAAZ,GAAsB,OAAtB;AACAhB,IAAAA,GAAG,CAACC,OAAJ,CAAYgB,SAAZ,GAAwB,EAAxB;AACAjB,IAAAA,GAAG,CAACC,OAAJ,CAAYiB,WAAZ,GAA0B7B,KAAK,CAAC8B,KAAhC;AACAnB,IAAAA,GAAG,CAACC,OAAJ,CAAYmB,SAAZ,GALuB,CAMvB;;AACApB,IAAAA,GAAG,CAACC,OAAJ,CAAYoB,MAAZ,CACEf,CAAC,CAACE,OAAF,GAAYT,SAAS,CAACE,OAAV,CAAkBQ,UADhC,EAEEH,CAAC,CAACI,OAAF,GAAYX,SAAS,CAACE,OAAV,CAAkBU,SAFhC;AAIApB,IAAAA,UAAU,CAAC,IAAD,CAAV;AACD;;AACD,WAAS+B,WAAT,GAAuB;AACrBtB,IAAAA,GAAG,CAACC,OAAJ,CAAYsB,SAAZ;AACAhC,IAAAA,UAAU,CAAC,KAAD,CAAV;AACD;;AAEC,SAAO;AACD,IAAA,GAAG,EAAEQ,SADJ;AAED,IAAA,KAAK,EAAEI,WAFN;AAGD,IAAA,MAAM,EAAEC,YAHP;AAID,IAAA,WAAW,EAAEU,YAJZ;AAKD,IAAA,SAAS,EAAEQ,WALV;AAMD,IAAA,UAAU,EAAEA,WANX;AAOD,IAAA,WAAW,EAAEjB,eAPZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AAUH","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport useWindowSize from './WindowSize'\n\nexport default function Canvas(props) {\n  const [drawing, setDrawing] = useState(false)\n  const [width, setWidth] = useState(window.innerWidth)\n  const [height, setHeight] = useState(window.innerHeight)\n\n  const canvasRef = useRef()\n  const ctx = useRef()\n  useEffect(() => {\n    ctx.current = canvasRef.current.getContext('2d')\n\n  }, [])\n\n  const [windowWidth, windowHeight] = useWindowSize(() => {\n    setWidth(windowWidth)\n    setHeight(windowHeight)\n  })\n\n  function handleMouseMove(e) {\n    // actual coordinates\n    const coords = [\n      e.clientX - canvasRef.current.offsetLeft,\n      e.clientY - canvasRef.current.offsetTop\n    ]\n    if (drawing) { \n      ctx.current.lineTo(...coords)\n      ctx.current.stroke()\n    }\n    if (props.handleMouseMove) {\n        props.handleMouseMove(...coords)\n    }\n  }\n  \n  function startDrawing(e) {\n    ctx.current.lineJoin = 'round'\n    ctx.current.lineCap = 'round'\n    ctx.current.lineWidth = 10\n    ctx.current.strokeStyle = props.color\n    ctx.current.beginPath();\n    // actual coordinates\n    ctx.current.moveTo(\n      e.clientX - canvasRef.current.offsetLeft,\n      e.clientY - canvasRef.current.offsetTop\n    )\n    setDrawing(true)\n  }\n  function stopDrawing() {\n    ctx.current.closePath()\n    setDrawing(false)\n  }\n  \n    return <canvas\n          ref={canvasRef}\n          width={windowWidth}\n          height={windowHeight}\n          onMouseDown={startDrawing}\n          onMouseUp={stopDrawing}\n          onMouseOut={stopDrawing}\n          onMouseMove={handleMouseMove}\n    />\n    \n}\n"]},"metadata":{},"sourceType":"module"}